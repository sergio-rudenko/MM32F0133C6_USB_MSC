/*
 * usb_desc.c
 *
 *  Created on: 3 июн. 2021 г.
 *      Author: sa100
 */

#include "usb_conf.h"

/* ---[ private macros ]--------------------------------------------------- */
#define LOBYTE(x)  ((uint8_t)(((x) & 0x00FFU) >> 0U))
#define HIBYTE(x)  ((uint8_t)(((x) & 0xFF00U) >> 8U))


/* ---[ private definitions ]---------------------------------------------- */
#define USB_MAX_EP0_SIZE                      64U
#define USB_CDC_CONFIG_DESC_SIZ				  67U

#define CDC_IN_EP							0x81U  /* EP1 for data IN */
#define CDC_OUT_EP                          0x03U  /* EP3 for data OUT */
#define CDC_CMD_EP                          0x82U  /* EP2 for CDC commands */

#define CDC_CMD_PACKET_SIZE                    8U  /* Control Endpoint Packet size */
#define CDC_FS_BINTERVAL                    0x10U


/* ---[ USB Standard Device Descriptor ]----------------------------------- */
const uint8_t USB_DeviceDescriptor[] =
  {
    0x12,                       	/*bLength */
    USB_DESC_TYPE_DEVICE,       	/*bDescriptorType*/
    0x00,                       	/*bcdUSB: 2.00 */
    0x02,
    0x02,                       	/*bDeviceClass*/
    0x02,                       	/*bDeviceSubClass*/
    0x00,                       	/*bDeviceProtocol*/
    USB_MAX_EP0_SIZE,           	/*bMaxPacketSize*/
    LOBYTE(USBD_VID),           	/*idVendor*/
    HIBYTE(USBD_VID),           	/*idVendor*/
    LOBYTE(USBD_PID),        		/*idProduct*/
    HIBYTE(USBD_PID),        		/*idProduct*/
    0x00,                       	/*bcdDevice rel. 2.00*/
    0x02,
    USB_DESC_VENDOR_INDEX,			/*Index of manufacturer  string*/
    USB_DESC_PRODUCT_INDEX,			/*Index of product string*/
    USB_DESC_SERIAL_NUMBER_INDEX,	/*Index of serial number string*/
    0x01  							/*bNumConfigurations*/
  };
const uint16_t USB_DeviceDescriptorSize = sizeof(USB_DeviceDescriptor);

/* ---[ USB CDC device Configuration Descriptor ]-------------------------- */
const uint8_t USB_ConfigDescriptor[] =
  {
    /*Configuration Descriptor*/
    0x09,   						/* bLength: Configuration Descriptor size */
    USB_DESC_TYPE_CONFIGURATION,	/* bDescriptorType: Configuration */
    USB_CDC_CONFIG_DESC_SIZ,        /* wTotalLength:no of returned bytes */
    0x00,
    0x02,   						/* bNumInterfaces: 2 interface */
    0x01,   						/* bConfigurationValue: Configuration value */
    0x00,   						/* iConfiguration: Index of string descriptor describing the configuration */
    0x80,   						/* bmAttributes: bus powered */
    0x32,   						/* MaxPower 100 mA */

    /*----------------------------------------------------------------------*/

    /*Interface Descriptor */
    0x09,   						/* bLength: Interface Descriptor size */
    USB_DESC_TYPE_INTERFACE,  		/* bDescriptorType: Interface */

    /* Interface descriptor type */
    0x00,   						/* bInterfaceNumber: Number of Interface */
    0x00,   						/* bAlternateSetting: Alternate setting */
    0x01,   						/* bNumEndpoints: One endpoints used */
    0x02,   						/* bInterfaceClass: Communication Interface Class */
    0x02,   						/* bInterfaceSubClass: Abstract Control Model */
    0x01,   						/* bInterfaceProtocol: Common AT commands */
    0x00,   						/* iInterface: */

    /*Header Functional Descriptor*/
    0x05,   						/* bLength: Endpoint Descriptor size */
    0x24,   						/* bDescriptorType: CS_INTERFACE */
    0x00,   						/* bDescriptorSubtype: Header Func Desc */
    0x10,   						/* bcdCDC: spec release number */
    0x01,

    /*Call Management Functional Descriptor*/
    0x05,   						/* bFunctionLength */
    0x24,   						/* bDescriptorType: CS_INTERFACE */
    0x01,   						/* bDescriptorSubtype: Call Management Func Desc */
    0x00,   						/* bmCapabilities: D0+D1 */
    0x01,   						/* bDataInterface: 1 */

    /*ACM Functional Descriptor*/
    0x04,   						/* bFunctionLength */
    0x24,   						/* bDescriptorType: CS_INTERFACE */
    0x02,   						/* bDescriptorSubtype: Abstract Control Management desc */
    0x02,   						/* bmCapabilities */

    /*Union Functional Descriptor*/
    0x05,   						/* bFunctionLength */
    0x24,   						/* bDescriptorType: CS_INTERFACE */
    0x06,   						/* bDescriptorSubtype: Union func desc */
    0x00,   						/* bMasterInterface: Communication class interface */
    0x01,   						/* bSlaveInterface0: Data Class Interface */

    /*Endpoint 2 Descriptor*/
    0x07,                           /* bLength: Endpoint Descriptor size */
    USB_DESC_TYPE_ENDPOINT,   		/* bDescriptorType: Endpoint */
    CDC_CMD_EP,                     /* bEndpointAddress */
    0x03,                           /* bmAttributes: Interrupt */
    LOBYTE(CDC_CMD_PACKET_SIZE),	/* wMaxPacketSize: */
    HIBYTE(CDC_CMD_PACKET_SIZE),
    CDC_FS_BINTERVAL,               /* bInterval: */

    /*----------------------------------------------------------------------*/

    /*Data class interface descriptor*/
    0x09,   						/* bLength: Endpoint Descriptor size */
    USB_DESC_TYPE_INTERFACE,  		/* bDescriptorType: */
    0x01,   						/* bInterfaceNumber: Number of Interface */
    0x00,   						/* bAlternateSetting: Alternate setting */
    0x02,   						/* bNumEndpoints: Two endpoints used */
    0x0A,   						/* bInterfaceClass: CDC */
    0x00,   						/* bInterfaceSubClass: */
    0x00,   						/* bInterfaceProtocol: */
    0x00,   						/* iInterface: */

    /*Endpoint OUT Descriptor*/
    0x07,   						/* bLength: Endpoint Descriptor size */
    USB_DESC_TYPE_ENDPOINT,      	/* bDescriptorType: Endpoint */
    CDC_OUT_EP,                     /* bEndpointAddress */
    0x02,                           /* bmAttributes: Bulk */
    LOBYTE(CDC_DATA_FS_MAX_PACKET_SIZE),  /* wMaxPacketSize: */
    HIBYTE(CDC_DATA_FS_MAX_PACKET_SIZE),
    0x00,                           /* bInterval: ignore for Bulk transfer */

    /* Endpoint IN Descriptor*/
    0x07,   						/* bLength: Endpoint Descriptor size */
    USB_DESC_TYPE_ENDPOINT,      	/* bDescriptorType: Endpoint */
    CDC_IN_EP,                      /* bEndpointAddress */
    0x02,                           /* bmAttributes: Bulk */
    LOBYTE(CDC_DATA_FS_MAX_PACKET_SIZE),  /* wMaxPacketSize: */
    HIBYTE(CDC_DATA_FS_MAX_PACKET_SIZE),
    0x00                            /* bInterval: ignore for Bulk transfer */
  } ;
const uint16_t USB_ConfigDescriptorSize = sizeof(USB_ConfigDescriptor);


/* ---[ USB String Descriptors ]------------------------------------------- */
const uint8_t USB_LangIdDescriptor[] =
  {
    0x09, 0x04, /* LangID = 0x0409: U.S. English */
  };
const uint16_t USB_LangIdDescriptorSize = sizeof(USB_LangIdDescriptor);


const uint8_t USB_VendorDescriptor[] =
  {
    'M', 0,
    'i', 0,
    'n', 0,
    'd', 0,
    'M', 0,
    'o', 0,
    't', 0,
    'i', 0,
    'o', 0,
    'n', 0,
  };
const uint16_t USB_VendorDescriptorSize = sizeof(USB_VendorDescriptor);


const uint8_t USB_ProductDescriptor[] =
  {
    'M', 0,
    'i', 0,
    'n', 0,
    'd', 0,
    'M', 0,
    'o', 0,
    't', 0,
    'i', 0,
    'o', 0,
    'n', 0,
    ' ', 0,
    'V', 0,
    'i', 0,
    'r', 0,
    't', 0,
    'u', 0,
    'a', 0,
    'l', 0,
    ' ', 0,
    'C', 0,
    'O', 0,
    'M', 0,
    ' ', 0,
    'P', 0,
    'o', 0,
    'r', 0,
    't', 0,
    ' ', 0,
    ' ', 0
  };
const uint16_t USB_ProductDescriptorSize = sizeof(USB_ProductDescriptor);
